using ExcelDna.Integration;
using ExcelDna.IntelliSense;
using System.Runtime.InteropServices;
using ExcelDna.Integration.CustomUI;
using KRExcel;

namespace KRExcel
{
    public static class CommonDeclaration
    {
        public const double MaxDegMinSec = 60.0;
        public const string DegreeSymbol = "°";
        public const string MinuteSymbol = "'";
        public const string SecondSymbol = "\"";
        public const string Owner = "KR-Excel";
    }

    public static class Commands
    {
        [ExcelFunction(Description = "My first .NET function")]
        public static string SayHello(string name)
        {
            return "Hello " + name;
        }

        [ExcelFunction(Description = "A useful test function that adds two numbers, and returns the sum.")]
        public static double AddThem(
            [ExcelArgument(Name = "Augend", Description = "is the first number, to which will be added")]
            double v1,
            [ExcelArgument(Name = "Addend", Description = "is the second number that will be added")]
            double v2)
        {
            return v1 + v2;
        }

        [ExcelFunction(Description = "Convert angle(degree) to format _°_'_''.")]
        public static object AngleToDMS(
            [ExcelArgument(Name = "Angle", Description = "Angle to convert.")]
            object angle,
            [ExcelArgument(Name = "High precision", Description = "Precision level." +
                                                                "\nTrue: return value in _°_'_''" +
                                                               "\nFalse: return value in _°_'" +
                                                               "\nBy default is False")]
            object highPrecision)
        {
            //Initialize return value:
            string retVal = string.Empty;

            //Get degree:
            double deg = 0.0;
            if (angle is not double || angle is ExcelDna.Integration.ExcelMissing)
            {
                //throw new ArgumentException();
                return ExcelDna.Integration.ExcelError.ExcelErrorValue;
            }
            else
            {
                deg = System.Convert.ToDouble(angle);
            }

            //Check flag argument:
            bool isHighPre = false;
            if (highPrecision is ExcelDna.Integration.ExcelMissing)
            {
                isHighPre = false;
            }
            else
            {
                if (highPrecision is not bool)
                {
                    //throw new ArgumentException();
                    return ExcelDna.Integration.ExcelError.ExcelErrorValue;
                }
                else
                {
                    isHighPre = System.Convert.ToBoolean(highPrecision);
                }
            }
            
            double minuteP = (deg - System.Math.Truncate(deg)) * CommonDeclaration.MaxDegMinSec;
            double secondP = (minuteP - System.Math.Truncate(minuteP)) * CommonDeclaration.MaxDegMinSec;

            if (!isHighPre)
            {
                deg = System.Math.Truncate(deg);
                minuteP = System.Math.Round(minuteP);

                if (minuteP.Equals(CommonDeclaration.MaxDegMinSec))
                {
                    deg += 1.0;
                    minuteP = 0.0;
                }

                retVal = deg.ToString() + CommonDeclaration.DegreeSymbol +
                         minuteP.ToString() + CommonDeclaration.MinuteSymbol;
            }
            else
            {
                deg = System.Math.Truncate(deg);
                minuteP = System.Math.Truncate(minuteP);
                secondP = System.Math.Round(secondP);

                if (secondP.Equals(CommonDeclaration.MaxDegMinSec))
                {
                    minuteP += 1.0;
                    secondP = 0.0;
                }

                if (minuteP.Equals(CommonDeclaration.MaxDegMinSec))
                {
                    deg += 1.0;
                    minuteP = 0.0;
                }

                retVal = deg.ToString() + CommonDeclaration.DegreeSymbol +
                         minuteP.ToString() + CommonDeclaration.MinuteSymbol +
                         secondP.ToString() + CommonDeclaration.SecondSymbol;
            }

            return retVal;
        }
    }

    // Here is the helper class - add to it or change as you require
    internal static class Optional
    {
        internal static string Check(object arg, string defaultValue)
        {
            if (arg is string)
                return (string)arg;
            else if (arg is ExcelMissing)
                return defaultValue;
            else
                return arg.ToString();  // Or whatever you want to do here....

            // Perhaps check for other types and do whatever you think is right ....
            //else if (arg is double)
            //    return "Double: " + (double)arg;
            //else if (arg is bool)
            //    return "Boolean: " + (bool)arg;
            //else if (arg is ExcelError)
            //    return "ExcelError: " + arg.ToString();
            //else if (arg is object[,](,))
            //    // The object array returned here may contain a mixture of types,
            //    // reflecting the different cell contents.
            //    return string.Format("Array[{0},{1}]({0},{1})",
            //      ((object[,](,)(,))arg).GetLength(0), ((object[,](,)(,))arg).GetLength(1));
            //else if (arg is ExcelEmpty)
            //    return "<<Empty>>"; // Would have been null
            //else if (arg is ExcelReference)
            //  // Calling xlfRefText here requires IsMacroType=true for this function.
            //                return "Reference: " +
            //                     XlCall.Excel(XlCall.xlfReftext, arg, true);
            //            else
            //                return "!? Unheard Of ?!";
        }

        internal static double Check(object arg, double defaultValue)
        {
            if (arg is double)
                return (double)arg;
            else if (arg is ExcelMissing)
                return defaultValue;
            else
                throw new ArgumentException();  // Will return #VALUE to Excel

        }

        // This one is more tricky - we have to do the double->Date conversions ourselves
        internal static DateTime Check(object arg, DateTime defaultValue)
        {
            if (arg is double)
                return DateTime.FromOADate((double)arg);    // Here is the conversion
            else if (arg is string)
                return DateTime.Parse((string)arg);
            else if (arg is ExcelMissing)
                return defaultValue;

            else
                throw new ArgumentException();  // Or defaultValue or whatever
        }
    }

    public class IntelliSenseAddIn : IExcelAddIn
    {
        public void AutoOpen()
        {
            IntelliSenseServer.Install();
        }
        public void AutoClose()
        {
            IntelliSenseServer.Uninstall();
        }
    }
}

namespace Ribbon
{
    public static class Functions
    {
        public static string dnaRibbonTest()
        {
            return "Hello from the Ribbon Sample!";
        }
    }

    [ComVisible(true)]
    public class RibbonController : ExcelRibbon
    {
        public override string GetCustomUI(string RibbonID)
        {
            return @"
                  <customUI xmlns='http://schemas.microsoft.com/office/2006/01/customui'>
                  <ribbon>
                    <tabs>
                      <tab id='krExcelTab' label='KR-Excel'>
                        <group id='krUtilGrp' label='KR-Utility'>
                          <button id='projectBtn' label='物件管理' 
                                                  imageMso='ControlProperties'
                                                  screentip='Show/edit user settings'
                                                  onAction='OnButtonPressed'
                         />
                        </group >
                      </tab>
                    </tabs>
                  </ribbon>
                </customUI>";
        }

        public void OnButtonPressed(IRibbonControl control)
        {
            MessageBox.Show("Hello from control " + control.Id, CommonDeclaration.Owner ,
                            MessageBoxButtons.OK,MessageBoxIcon.Information);
        }
    }
}
